        -:    0:Source:/home/kail/Рабочий стол/Engine/external_libraries/glfw/src/init.c
        -:    0:Graph:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/external_libraries/glfw/src/CMakeFiles/glfw.dir/init.c.gcno
        -:    0:Data:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/external_libraries/glfw/src/CMakeFiles/glfw.dir/init.c.gcda
        -:    0:Runs:1
        -:    1://========================================================================
        -:    2:// GLFW 3.4 - www.glfw.org
        -:    3://------------------------------------------------------------------------
        -:    4:// Copyright (c) 2002-2006 Marcus Geelnard
        -:    5:// Copyright (c) 2006-2018 Camilla Löwy <elmindreda@glfw.org>
        -:    6://
        -:    7:// This software is provided 'as-is', without any express or implied
        -:    8:// warranty. In no event will the authors be held liable for any damages
        -:    9:// arising from the use of this software.
        -:   10://
        -:   11:// Permission is granted to anyone to use this software for any purpose,
        -:   12:// including commercial applications, and to alter it and redistribute it
        -:   13:// freely, subject to the following restrictions:
        -:   14://
        -:   15:// 1. The origin of this software must not be misrepresented; you must not
        -:   16://    claim that you wrote the original software. If you use this software
        -:   17://    in a product, an acknowledgment in the product documentation would
        -:   18://    be appreciated but is not required.
        -:   19://
        -:   20:// 2. Altered source versions must be plainly marked as such, and must not
        -:   21://    be misrepresented as being the original software.
        -:   22://
        -:   23:// 3. This notice may not be removed or altered from any source
        -:   24://    distribution.
        -:   25://
        -:   26://========================================================================
        -:   27:// Please use C89 style variable declarations in this file because VS 2010
        -:   28://========================================================================
        -:   29:
        -:   30:#include "internal.h"
        -:   31:#include "mappings.h"
        -:   32:
        -:   33:#include <string.h>
        -:   34:#include <stdlib.h>
        -:   35:#include <stdio.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <assert.h>
        -:   38:
        -:   39:
        -:   40:// The global variables below comprise all mutable global data in GLFW
        -:   41://
        -:   42:// Any other global variable is a bug
        -:   43:
        -:   44:// Global state shared between compilation units of GLFW
        -:   45://
        -:   46:_GLFWlibrary _glfw = { GLFW_FALSE };
        -:   47:
        -:   48:// These are outside of _glfw so they can be used before initialization and
        -:   49:// after termination
        -:   50://
        -:   51:static _GLFWerror _glfwMainThreadError;
        -:   52:static GLFWerrorfun _glfwErrorCallback;
        -:   53:static _GLFWinitconfig _glfwInitHints =
        -:   54:{
        -:   55:    GLFW_TRUE,      // hat buttons
        -:   56:    GLFW_ANGLE_PLATFORM_TYPE_NONE, // ANGLE backend
        -:   57:    {
        -:   58:        GLFW_TRUE,  // macOS menu bar
        -:   59:        GLFW_TRUE   // macOS bundle chdir
        -:   60:    }
        -:   61:};
        -:   62:
        -:   63:// Terminate the library
        -:   64://
    #####:   65:static void terminate(void)
        -:   66:{
        -:   67:    int i;
        -:   68:
    #####:   69:    memset(&_glfw.callbacks, 0, sizeof(_glfw.callbacks));
        -:   70:
    #####:   71:    while (_glfw.windowListHead)
    %%%%%:   71-block  0
    %%%%%:   71-block  1
    #####:   72:        glfwDestroyWindow((GLFWwindow*) _glfw.windowListHead);
    %%%%%:   72-block  0
        -:   73:
    #####:   74:    while (_glfw.cursorListHead)
    %%%%%:   74-block  0
    %%%%%:   74-block  1
    #####:   75:        glfwDestroyCursor((GLFWcursor*) _glfw.cursorListHead);
    %%%%%:   75-block  0
        -:   76:
    #####:   77:    for (i = 0;  i < _glfw.monitorCount;  i++)
    %%%%%:   77-block  0
    %%%%%:   77-block  1
        -:   78:    {
    #####:   79:        _GLFWmonitor* monitor = _glfw.monitors[i];
    #####:   80:        if (monitor->originalRamp.size)
    %%%%%:   80-block  0
    #####:   81:            _glfwPlatformSetGammaRamp(monitor, &monitor->originalRamp);
    %%%%%:   81-block  0
    #####:   82:        _glfwFreeMonitor(monitor);
    %%%%%:   82-block  0
        -:   83:    }
        -:   84:
    #####:   85:    free(_glfw.monitors);
    #####:   86:    _glfw.monitors = NULL;
    #####:   87:    _glfw.monitorCount = 0;
        -:   88:
    #####:   89:    free(_glfw.mappings);
    #####:   90:    _glfw.mappings = NULL;
    #####:   91:    _glfw.mappingCount = 0;
        -:   92:
    #####:   93:    _glfwTerminateVulkan();
    %%%%%:   93-block  0
    #####:   94:    _glfwPlatformTerminateJoysticks();
    #####:   95:    _glfwPlatformTerminate();
        -:   96:
    #####:   97:    _glfw.initialized = GLFW_FALSE;
        -:   98:
    #####:   99:    while (_glfw.errorListHead)
    %%%%%:   99-block  0
        -:  100:    {
    #####:  101:        _GLFWerror* error = _glfw.errorListHead;
    #####:  102:        _glfw.errorListHead = error->next;
    #####:  103:        free(error);
    %%%%%:  103-block  0
        -:  104:    }
        -:  105:
    #####:  106:    _glfwPlatformDestroyTls(&_glfw.contextSlot);
    %%%%%:  106-block  0
    #####:  107:    _glfwPlatformDestroyTls(&_glfw.errorSlot);
    #####:  108:    _glfwPlatformDestroyMutex(&_glfw.errorLock);
        -:  109:
    #####:  110:    memset(&_glfw, 0, sizeof(_glfw));
    #####:  111:}
        -:  112:
        -:  113:
        -:  114://////////////////////////////////////////////////////////////////////////
        -:  115://////                       GLFW internal API                      //////
        -:  116://////////////////////////////////////////////////////////////////////////
        -:  117:
        2:  118:char* _glfw_strdup(const char* source)
        -:  119:{
        2:  120:    const size_t length = strlen(source);
        2:  121:    char* result = calloc(length + 1, 1);
        2:  122:    strcpy(result, source);
        2:  123:    return result;
        2:  123-block  0
        -:  124:}
        -:  125:
    #####:  126:float _glfw_fminf(float a, float b)
        -:  127:{
    #####:  128:    if (a != a)
    %%%%%:  128-block  0
    #####:  129:        return b;
    %%%%%:  129-block  0
    #####:  130:    else if (b != b)
    %%%%%:  130-block  0
    #####:  131:        return a;
    %%%%%:  131-block  0
    #####:  132:    else if (a < b)
    %%%%%:  132-block  0
    #####:  133:        return a;
    %%%%%:  133-block  0
        -:  134:    else
    #####:  135:        return b;
    %%%%%:  135-block  0
        -:  136:}
        -:  137:
    #####:  138:float _glfw_fmaxf(float a, float b)
        -:  139:{
    #####:  140:    if (a != a)
    %%%%%:  140-block  0
    #####:  141:        return b;
    %%%%%:  141-block  0
    #####:  142:    else if (b != b)
    %%%%%:  142-block  0
    #####:  143:        return a;
    %%%%%:  143-block  0
    #####:  144:    else if (a > b)
    %%%%%:  144-block  0
    #####:  145:        return a;
    %%%%%:  145-block  0
        -:  146:    else
    #####:  147:        return b;
    %%%%%:  147-block  0
        -:  148:}
        -:  149:
        -:  150:
        -:  151://////////////////////////////////////////////////////////////////////////
        -:  152://////                         GLFW event API                       //////
        -:  153://////////////////////////////////////////////////////////////////////////
        -:  154:
        -:  155:// Notifies shared code of an error
        -:  156://
    #####:  157:void _glfwInputError(int code, const char* format, ...)
        -:  158:{
        -:  159:    _GLFWerror* error;
        -:  160:    char description[_GLFW_MESSAGE_SIZE];
        -:  161:
    #####:  162:    if (format)
    %%%%%:  162-block  0
        -:  163:    {
        -:  164:        va_list vl;
        -:  165:
    #####:  166:        va_start(vl, format);
    #####:  167:        vsnprintf(description, sizeof(description), format, vl);
    #####:  168:        va_end(vl);
        -:  169:
    #####:  170:        description[sizeof(description) - 1] = '\0';
    %%%%%:  170-block  0
        -:  171:    }
        -:  172:    else
        -:  173:    {
    #####:  174:        if (code == GLFW_NOT_INITIALIZED)
    %%%%%:  174-block  0
    #####:  175:            strcpy(description, "The GLFW library is not initialized");
    %%%%%:  175-block  0
    #####:  176:        else if (code == GLFW_NO_CURRENT_CONTEXT)
    %%%%%:  176-block  0
    #####:  177:            strcpy(description, "There is no current context");
    %%%%%:  177-block  0
    #####:  178:        else if (code == GLFW_INVALID_ENUM)
    %%%%%:  178-block  0
    #####:  179:            strcpy(description, "Invalid argument for enum parameter");
    %%%%%:  179-block  0
    #####:  180:        else if (code == GLFW_INVALID_VALUE)
    %%%%%:  180-block  0
    #####:  181:            strcpy(description, "Invalid value for parameter");
    %%%%%:  181-block  0
    #####:  182:        else if (code == GLFW_OUT_OF_MEMORY)
    %%%%%:  182-block  0
    #####:  183:            strcpy(description, "Out of memory");
    %%%%%:  183-block  0
    #####:  184:        else if (code == GLFW_API_UNAVAILABLE)
    %%%%%:  184-block  0
    #####:  185:            strcpy(description, "The requested API is unavailable");
    %%%%%:  185-block  0
    #####:  186:        else if (code == GLFW_VERSION_UNAVAILABLE)
    %%%%%:  186-block  0
    #####:  187:            strcpy(description, "The requested API version is unavailable");
    %%%%%:  187-block  0
    #####:  188:        else if (code == GLFW_PLATFORM_ERROR)
    %%%%%:  188-block  0
    #####:  189:            strcpy(description, "A platform-specific error occurred");
    %%%%%:  189-block  0
    #####:  190:        else if (code == GLFW_FORMAT_UNAVAILABLE)
    %%%%%:  190-block  0
    #####:  191:            strcpy(description, "The requested format is unavailable");
    %%%%%:  191-block  0
    #####:  192:        else if (code == GLFW_NO_WINDOW_CONTEXT)
    %%%%%:  192-block  0
    #####:  193:            strcpy(description, "The specified window has no context");
    %%%%%:  193-block  0
    #####:  194:        else if (code == GLFW_CURSOR_UNAVAILABLE)
    %%%%%:  194-block  0
    #####:  195:            strcpy(description, "The specified cursor shape is unavailable");
    %%%%%:  195-block  0
    #####:  196:        else if (code == GLFW_FEATURE_UNAVAILABLE)
    %%%%%:  196-block  0
    #####:  197:            strcpy(description, "The requested feature cannot be implemented for this platform");
    %%%%%:  197-block  0
    #####:  198:        else if (code == GLFW_FEATURE_UNIMPLEMENTED)
    %%%%%:  198-block  0
    #####:  199:            strcpy(description, "The requested feature has not yet been implemented for this platform");
    %%%%%:  199-block  0
        -:  200:        else
    #####:  201:            strcpy(description, "ERROR: UNKNOWN GLFW ERROR");
    %%%%%:  201-block  0
        -:  202:    }
        -:  203:
    #####:  204:    if (_glfw.initialized)
    %%%%%:  204-block  0
        -:  205:    {
    #####:  206:        error = _glfwPlatformGetTls(&_glfw.errorSlot);
    %%%%%:  206-block  0
    #####:  207:        if (!error)
        -:  208:        {
    #####:  209:            error = calloc(1, sizeof(_GLFWerror));
    #####:  210:            _glfwPlatformSetTls(&_glfw.errorSlot, error);
    %%%%%:  210-block  0
    #####:  211:            _glfwPlatformLockMutex(&_glfw.errorLock);
    #####:  212:            error->next = _glfw.errorListHead;
    #####:  213:            _glfw.errorListHead = error;
    #####:  214:            _glfwPlatformUnlockMutex(&_glfw.errorLock);
        -:  215:        }
        -:  216:    }
        -:  217:    else
    #####:  218:        error = &_glfwMainThreadError;
    %%%%%:  218-block  0
        -:  219:
    #####:  220:    error->code = code;
    #####:  221:    strcpy(error->description, description);
        -:  222:
    #####:  223:    if (_glfwErrorCallback)
    %%%%%:  223-block  0
    #####:  224:        _glfwErrorCallback(code, description);
    %%%%%:  224-block  0
    #####:  225:}
        -:  226:
        -:  227:
        -:  228://////////////////////////////////////////////////////////////////////////
        -:  229://////                        GLFW public API                       //////
        -:  230://////////////////////////////////////////////////////////////////////////
        -:  231:
        1:  232:GLFWAPI int glfwInit(void)
        -:  233:{
        1:  234:    if (_glfw.initialized)
        1:  234-block  0
    #####:  235:        return GLFW_TRUE;
    %%%%%:  235-block  0
        -:  236:
        1:  237:    memset(&_glfw, 0, sizeof(_glfw));
        1:  238:    _glfw.hints.init = _glfwInitHints;
        -:  239:
        1:  240:    if (!_glfwPlatformInit())
        1:  240-block  0
        -:  241:    {
    #####:  242:        terminate();
    %%%%%:  242-block  0
    #####:  243:        return GLFW_FALSE;
        -:  244:    }
        -:  245:
        2:  246:    if (!_glfwPlatformCreateMutex(&_glfw.errorLock) ||
        1:  246-block  0
        2:  247:        !_glfwPlatformCreateTls(&_glfw.errorSlot) ||
        1:  247-block  0
        1:  248:        !_glfwPlatformCreateTls(&_glfw.contextSlot))
        1:  248-block  0
        -:  249:    {
    #####:  250:        terminate();
    %%%%%:  250-block  0
    #####:  251:        return GLFW_FALSE;
        -:  252:    }
        -:  253:
        1:  254:    _glfwPlatformSetTls(&_glfw.errorSlot, &_glfwMainThreadError);
        1:  254-block  0
        -:  255:
        1:  256:    _glfw.initialized = GLFW_TRUE;
        1:  257:    _glfw.timer.offset = _glfwPlatformGetTimerValue();
        -:  258:
        1:  259:    glfwDefaultWindowHints();
        -:  260:
        -:  261:    {
        -:  262:        int i;
        -:  263:
      411:  264:        for (i = 0;  _glfwDefaultMappings[i];  i++)
      410:  264-block  0
      411:  264-block  1
        -:  265:        {
      410:  266:            if (!glfwUpdateGamepadMappings(_glfwDefaultMappings[i]))
      410:  266-block  0
        -:  267:            {
    #####:  268:                terminate();
    %%%%%:  268-block  0
    #####:  269:                return GLFW_FALSE;
        -:  270:            }
        -:  271:        }
        -:  272:    }
        -:  273:
        1:  274:    return GLFW_TRUE;
        1:  274-block  0
        -:  275:}
        -:  276:
    #####:  277:GLFWAPI void glfwTerminate(void)
        -:  278:{
    #####:  279:    if (!_glfw.initialized)
    %%%%%:  279-block  0
    #####:  280:        return;
    %%%%%:  280-block  0
        -:  281:
    #####:  282:    terminate();
    %%%%%:  282-block  0
        -:  283:}
        -:  284:
    #####:  285:GLFWAPI void glfwInitHint(int hint, int value)
        -:  286:{
    #####:  287:    switch (hint)
    %%%%%:  287-block  0
        -:  288:    {
    #####:  289:        case GLFW_JOYSTICK_HAT_BUTTONS:
    #####:  290:            _glfwInitHints.hatButtons = value;
    #####:  291:            return;
    %%%%%:  291-block  0
    #####:  292:        case GLFW_ANGLE_PLATFORM_TYPE:
    #####:  293:            _glfwInitHints.angleType = value;
    #####:  294:            return;
    %%%%%:  294-block  0
    #####:  295:        case GLFW_COCOA_CHDIR_RESOURCES:
    #####:  296:            _glfwInitHints.ns.chdir = value;
    #####:  297:            return;
    %%%%%:  297-block  0
    #####:  298:        case GLFW_COCOA_MENUBAR:
    #####:  299:            _glfwInitHints.ns.menubar = value;
    #####:  300:            return;
    %%%%%:  300-block  0
        -:  301:    }
        -:  302:
    #####:  303:    _glfwInputError(GLFW_INVALID_ENUM,
    %%%%%:  303-block  0
        -:  304:                    "Invalid init hint 0x%08X", hint);
        -:  305:}
        -:  306:
    #####:  307:GLFWAPI void glfwGetVersion(int* major, int* minor, int* rev)
        -:  308:{
    #####:  309:    if (major != NULL)
    %%%%%:  309-block  0
    #####:  310:        *major = GLFW_VERSION_MAJOR;
    %%%%%:  310-block  0
    #####:  311:    if (minor != NULL)
    %%%%%:  311-block  0
    #####:  312:        *minor = GLFW_VERSION_MINOR;
    %%%%%:  312-block  0
    #####:  313:    if (rev != NULL)
    %%%%%:  313-block  0
    #####:  314:        *rev = GLFW_VERSION_REVISION;
    %%%%%:  314-block  0
    #####:  315:}
        -:  316:
    #####:  317:GLFWAPI const char* glfwGetVersionString(void)
        -:  318:{
    #####:  319:    return _glfwPlatformGetVersionString();
    %%%%%:  319-block  0
        -:  320:}
        -:  321:
    #####:  322:GLFWAPI int glfwGetError(const char** description)
        -:  323:{
        -:  324:    _GLFWerror* error;
    #####:  325:    int code = GLFW_NO_ERROR;
        -:  326:
    #####:  327:    if (description)
    %%%%%:  327-block  0
    #####:  328:        *description = NULL;
    %%%%%:  328-block  0
        -:  329:
    #####:  330:    if (_glfw.initialized)
    %%%%%:  330-block  0
    #####:  331:        error = _glfwPlatformGetTls(&_glfw.errorSlot);
    %%%%%:  331-block  0
        -:  332:    else
    #####:  333:        error = &_glfwMainThreadError;
    %%%%%:  333-block  0
        -:  334:
    #####:  335:    if (error)
    %%%%%:  335-block  0
        -:  336:    {
    #####:  337:        code = error->code;
    #####:  338:        error->code = GLFW_NO_ERROR;
    #####:  339:        if (description && code)
    %%%%%:  339-block  0
    %%%%%:  339-block  1
    #####:  340:            *description = error->description;
    %%%%%:  340-block  0
        -:  341:    }
        -:  342:
    #####:  343:    return code;
    %%%%%:  343-block  0
        -:  344:}
        -:  345:
    #####:  346:GLFWAPI GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun)
        -:  347:{
    #####:  348:    _GLFW_SWAP_POINTERS(_glfwErrorCallback, cbfun);
    #####:  349:    return cbfun;
    %%%%%:  349-block  0
        -:  350:}
        -:  351:
