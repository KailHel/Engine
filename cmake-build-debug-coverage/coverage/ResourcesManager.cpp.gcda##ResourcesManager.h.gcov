        -:    0:Source:/home/kail/Рабочий стол/Engine/support/ResourcesManager.h
        -:    0:Graph:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/support/ResourcesManager.cpp.gcno
        -:    0:Data:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/support/ResourcesManager.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kail on 27.12.2020.
        -:    3://
        -:    4:
        -:    5:#ifndef OPENGL_RESOURCESMANAGER_H
        -:    6:#define OPENGL_RESOURCESMANAGER_H
        -:    7:
        -:    8:
        -:    9:#include "glad/glad.h"
        -:   10:#include "GLFW/glfw3.h"
        -:   11:
        -:   12:
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include "string"
        -:   16:#include "iostream"
        -:   17:#include "map"
        -:   18:#include "memory"
        -:   19:
        -:   20:
        -:   21:
        -:   22:
        -:   23:using std::string;
        -:   24:using std::cout;
        -:   25:using std::cerr;
        -:   26:
        -:   27:namespace SK {
        -:   28:    namespace Render {
        -:   29:        class Shader;
        -:   30:
        -:   31:        class Texture;
        -:   32:    }
        -:   33:}
        -:   34:
        -:   35:
        -:   36:
        -:   37:
        -:   38:
        -:   39:
        -:   40:
        -:   41:
        -:   42:class ResourcesManager {
        -:   43:public:
        -:   44:    ResourcesManager() = delete;
        -:   45:    ~ResourcesManager() = default;
        -:   46:    ResourcesManager(const ResourcesManager&) = delete;
        -:   47:    ResourcesManager& operator=(const ResourcesManager&) = delete;
        -:   48:    ResourcesManager& operator=(ResourcesManager&&) = delete;
        -:   49:
        -:   50:
        -:   51:
        -:   52:
        -:   53:
        -:   54:
        -:   55:
        -:   56:
        -:   57:    //################################################################################################################################
        -:   58:    //---INIT---
        -:   59:    static bool InitGLFW();
        -:   60:    static bool InitGLAD();
        -:   61:    static void Destroy();
        -:   62:
        -:   63:
        -:   64:
        -:   65:    //################################################################################################################################
        -:   66:    //---WINDOW---
        -:   67:    static GLFWwindow *             _MWindow;
        -:   68:    static int                      WINDOW_W;
        -:   69:    static int                      WINDOW_H;
        -:   70:    static string                   WINDOW_TITLE;
        -:   71:
        -:   72:    static GLFWwindow *getWindow() {
        -:   73:        return _MWindow;
        -:   74:    }
        -:   75:    //################################################################################################################################
        -:   76:    //---SUPPORT---
        2:   77:    static string FileToString(const string &path) {
        4:   78:        std::ifstream f;
        2:   78-block  0
    $$$$$:   78-block  1
        2:   79:        f.open(path.c_str() ,std::ios::in | std::ios::binary);
        2:   79-block  0
        2:   80:        if (!f.is_open()){
        2:   80-block  0
        2:   80-block  1
    #####:   81:            cout << "WARNING :file not found - " << path << "\n";
    %%%%%:   81-block  0
    %%%%%:   81-block  1
    %%%%%:   81-block  2
        -:   82:        }
        4:   83:        std::stringstream s;
        2:   83-block  0
        2:   83-block  1
    $$$$$:   83-block  2
        2:   84:        s << f.rdbuf();
        2:   84-block  0
        2:   84-block  1
        2:   85:        if (s.str().empty()){
        2:   85-block  0
        2:   85-block  1
    #####:   86:            cout << "WARNING :the file is empty - " << path << "\n";
    %%%%%:   86-block  0
    %%%%%:   86-block  1
    %%%%%:   86-block  2
        -:   87:        }
        4:   88:        return s.str();
        2:   88-block  0
        2:   88-block  1
        -:   89:    }
        -:   90:
        -:   91:
        -:   92:private:
        -:   93:    static string _defaultPath;
        -:   94:public:
        -:   95:    static void setDefaultPath(const string& Path) {
        -:   96:        size_t found = Path.find_last_of("/\\");
        -:   97:        _defaultPath = Path.substr(0, found);
        -:   98:    }
        -:   99:
        -:  100:    //################################################################################################################################
        -:  101:    //---------SHADER---------
        -:  102:private:
        -:  103:    typedef std::map<const string ,SK::Render::Shader*>_shMap;
        1:  104:    static _shMap _ShaderMapInit(){_shMap s; return s;}
        1:  104-block  0
        -:  105:    static _shMap _ShaderMap;
        -:  106:public:
        -:  107:    static SK::Render::Shader* createShaderProgram  (const string& VertexShaderPath ,const string& FragmentShaderPath ,const string& ShaderName);
        -:  108:    static SK::Render::Shader* getShaderByName      (const string& ShaderName);
        -:  109:    static bool                freeShaderByName     (const string& ShaderName);
        -:  110:    static void                freeAllShader        ();
        -:  111:
        -:  112:
        -:  113:    //################################################################################################################################
        -:  114:    //---------TEXTURE---------
        -:  115:private:
        -:  116:    typedef std::map<const string ,SK::Render::Texture*>_stMap;
        1:  117:    static _stMap _TextureMapInit(){_stMap s; return s;}
        1:  117-block  0
        -:  118:    static _stMap _TextureMap;
        -:  119:public:
        -:  120:    static SK::Render::Texture* createTexture       (const string& ImagePath ,const string& TextureName);
        -:  121:    static SK::Render::Texture* getTextureByName    (const string& TextureName);
        -:  122:    static bool             freeTextureByName       (const string& TextureName);
        -:  123:    static void             freeAllTexture          ();
        -:  124:
        -:  125:};
        -:  126:
        -:  127:#endif //OPENGL_RESOURCESMANAGER_H
