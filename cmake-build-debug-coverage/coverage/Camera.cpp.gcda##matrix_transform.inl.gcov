        -:    0:Source:/home/kail/Рабочий стол/Engine/external_libraries/glm/glm/ext/matrix_transform.inl
        -:    0:Graph:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/graphics/Camera.cpp.gcno
        -:    0:Data:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/graphics/Camera.cpp.gcda
        -:    0:Runs:1
        -:    1:namespace glm
        -:    2:{
        -:    3:	template<typename genType>
        -:    4:	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType identity()
        -:    5:	{
        -:    6:		return detail::init_gentype<genType, detail::genTypeTrait<genType>::GENTYPE>::identity();
        -:    7:	}
        -:    8:
        -:    9:	template<typename T, qualifier Q>
    #####:   10:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
        -:   11:	{
    #####:   12:		mat<4, 4, T, Q> Result(m);
    #####:   13:		Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
    %%%%%:   13-block  0
    %%%%%:   13-block  1
    %%%%%:   13-block  2
    %%%%%:   13-block  3
    %%%%%:   13-block  4
    %%%%%:   13-block  5
    %%%%%:   13-block  6
    %%%%%:   13-block  7
    $$$$$:   13-block  8
    $$$$$:   13-block  9
    $$$$$:   13-block 10
    $$$$$:   13-block 11
    #####:   14:		return Result;
    %%%%%:   14-block  0
    %%%%%:   14-block  1
        -:   15:	}
        -:   16:
        -:   17:	template<typename T, qualifier Q>
    #####:   18:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& v)
        -:   19:	{
    #####:   20:		T const a = angle;
    #####:   21:		T const c = cos(a);
    %%%%%:   21-block  0
    #####:   22:		T const s = sin(a);
        -:   23:
    #####:   24:		vec<3, T, Q> axis(normalize(v));
    #####:   25:		vec<3, T, Q> temp((T(1) - c) * axis);
    %%%%%:   25-block  0
        -:   26:
        -:   27:		mat<4, 4, T, Q> Rotate;
    #####:   28:		Rotate[0][0] = c + temp[0] * axis[0];
    %%%%%:   28-block  0
    %%%%%:   28-block  1
    %%%%%:   28-block  2
    #####:   29:		Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
    %%%%%:   29-block  0
    %%%%%:   29-block  1
    %%%%%:   29-block  2
    %%%%%:   29-block  3
    %%%%%:   29-block  4
    #####:   30:		Rotate[0][2] = temp[0] * axis[2] - s * axis[1];
    %%%%%:   30-block  0
    %%%%%:   30-block  1
    %%%%%:   30-block  2
    %%%%%:   30-block  3
    %%%%%:   30-block  4
        -:   31:
    #####:   32:		Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
    %%%%%:   32-block  0
    %%%%%:   32-block  1
    %%%%%:   32-block  2
    %%%%%:   32-block  3
    %%%%%:   32-block  4
    #####:   33:		Rotate[1][1] = c + temp[1] * axis[1];
    %%%%%:   33-block  0
    %%%%%:   33-block  1
    %%%%%:   33-block  2
    %%%%%:   33-block  3
    #####:   34:		Rotate[1][2] = temp[1] * axis[2] + s * axis[0];
    %%%%%:   34-block  0
    %%%%%:   34-block  1
    %%%%%:   34-block  2
    %%%%%:   34-block  3
    %%%%%:   34-block  4
        -:   35:
    #####:   36:		Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
    %%%%%:   36-block  0
    %%%%%:   36-block  1
    %%%%%:   36-block  2
    %%%%%:   36-block  3
    %%%%%:   36-block  4
    #####:   37:		Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
    %%%%%:   37-block  0
    %%%%%:   37-block  1
    %%%%%:   37-block  2
    %%%%%:   37-block  3
    %%%%%:   37-block  4
    #####:   38:		Rotate[2][2] = c + temp[2] * axis[2];
    %%%%%:   38-block  0
    %%%%%:   38-block  1
    %%%%%:   38-block  2
    %%%%%:   38-block  3
        -:   39:
        -:   40:		mat<4, 4, T, Q> Result;
    #####:   41:		Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];
    %%%%%:   41-block  0
    %%%%%:   41-block  1
    %%%%%:   41-block  2
    %%%%%:   41-block  3
    %%%%%:   41-block  4
    %%%%%:   41-block  5
    %%%%%:   41-block  6
    %%%%%:   41-block  7
    %%%%%:   41-block  8
    %%%%%:   41-block  9
    %%%%%:   41-block 10
    %%%%%:   41-block 11
    %%%%%:   41-block 12
    %%%%%:   41-block 13
    %%%%%:   41-block 14
    $$$$$:   41-block 15
    $$$$$:   41-block 16
    $$$$$:   41-block 17
    $$$$$:   41-block 18
    #####:   42:		Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    %%%%%:   42-block  2
    %%%%%:   42-block  3
    %%%%%:   42-block  4
    %%%%%:   42-block  5
    %%%%%:   42-block  6
    %%%%%:   42-block  7
    %%%%%:   42-block  8
    %%%%%:   42-block  9
    %%%%%:   42-block 10
    %%%%%:   42-block 11
    %%%%%:   42-block 12
    %%%%%:   42-block 13
    %%%%%:   42-block 14
    $$$$$:   42-block 15
    $$$$$:   42-block 16
    $$$$$:   42-block 17
    $$$$$:   42-block 18
    #####:   43:		Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];
    %%%%%:   43-block  0
    %%%%%:   43-block  1
    %%%%%:   43-block  2
    %%%%%:   43-block  3
    %%%%%:   43-block  4
    %%%%%:   43-block  5
    %%%%%:   43-block  6
    %%%%%:   43-block  7
    %%%%%:   43-block  8
    %%%%%:   43-block  9
    %%%%%:   43-block 10
    %%%%%:   43-block 11
    %%%%%:   43-block 12
    %%%%%:   43-block 13
    %%%%%:   43-block 14
    $$$$$:   43-block 15
    $$$$$:   43-block 16
    $$$$$:   43-block 17
    $$$$$:   43-block 18
    #####:   44:		Result[3] = m[3];
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    #####:   45:		return Result;
    %%%%%:   45-block  0
    %%%%%:   45-block  1
        -:   46:	}
        -:   47:
        -:   48:	template<typename T, qualifier Q>
        -:   49:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate_slow(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const& v)
        -:   50:	{
        -:   51:		T const a = angle;
        -:   52:		T const c = cos(a);
        -:   53:		T const s = sin(a);
        -:   54:		mat<4, 4, T, Q> Result;
        -:   55:
        -:   56:		vec<3, T, Q> axis = normalize(v);
        -:   57:
        -:   58:		Result[0][0] = c + (static_cast<T>(1) - c)      * axis.x     * axis.x;
        -:   59:		Result[0][1] = (static_cast<T>(1) - c) * axis.x * axis.y + s * axis.z;
        -:   60:		Result[0][2] = (static_cast<T>(1) - c) * axis.x * axis.z - s * axis.y;
        -:   61:		Result[0][3] = static_cast<T>(0);
        -:   62:
        -:   63:		Result[1][0] = (static_cast<T>(1) - c) * axis.y * axis.x - s * axis.z;
        -:   64:		Result[1][1] = c + (static_cast<T>(1) - c) * axis.y * axis.y;
        -:   65:		Result[1][2] = (static_cast<T>(1) - c) * axis.y * axis.z + s * axis.x;
        -:   66:		Result[1][3] = static_cast<T>(0);
        -:   67:
        -:   68:		Result[2][0] = (static_cast<T>(1) - c) * axis.z * axis.x + s * axis.y;
        -:   69:		Result[2][1] = (static_cast<T>(1) - c) * axis.z * axis.y - s * axis.x;
        -:   70:		Result[2][2] = c + (static_cast<T>(1) - c) * axis.z * axis.z;
        -:   71:		Result[2][3] = static_cast<T>(0);
        -:   72:
        -:   73:		Result[3] = vec<4, T, Q>(0, 0, 0, 1);
        -:   74:		return m * Result;
        -:   75:	}
        -:   76:
        -:   77:	template<typename T, qualifier Q>
        -:   78:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
        -:   79:	{
        -:   80:		mat<4, 4, T, Q> Result;
        -:   81:		Result[0] = m[0] * v[0];
        -:   82:		Result[1] = m[1] * v[1];
        -:   83:		Result[2] = m[2] * v[2];
        -:   84:		Result[3] = m[3];
        -:   85:		return Result;
        -:   86:	}
        -:   87:
        -:   88:	template<typename T, qualifier Q>
        -:   89:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale_slow(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)
        -:   90:	{
        -:   91:		mat<4, 4, T, Q> Result(T(1));
        -:   92:		Result[0][0] = v.x;
        -:   93:		Result[1][1] = v.y;
        -:   94:		Result[2][2] = v.z;
        -:   95:		return m * Result;
        -:   96:	}
        -:   97:
        -:   98:	template<typename T, qualifier Q>
        -:   99:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
        -:  100:	{
        -:  101:		vec<3, T, Q> const f(normalize(center - eye));
        -:  102:		vec<3, T, Q> const s(normalize(cross(f, up)));
        -:  103:		vec<3, T, Q> const u(cross(s, f));
        -:  104:
        -:  105:		mat<4, 4, T, Q> Result(1);
        -:  106:		Result[0][0] = s.x;
        -:  107:		Result[1][0] = s.y;
        -:  108:		Result[2][0] = s.z;
        -:  109:		Result[0][1] = u.x;
        -:  110:		Result[1][1] = u.y;
        -:  111:		Result[2][1] = u.z;
        -:  112:		Result[0][2] =-f.x;
        -:  113:		Result[1][2] =-f.y;
        -:  114:		Result[2][2] =-f.z;
        -:  115:		Result[3][0] =-dot(s, eye);
        -:  116:		Result[3][1] =-dot(u, eye);
        -:  117:		Result[3][2] = dot(f, eye);
        -:  118:		return Result;
        -:  119:	}
        -:  120:
        -:  121:	template<typename T, qualifier Q>
        -:  122:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtLH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
        -:  123:	{
        -:  124:		vec<3, T, Q> const f(normalize(center - eye));
        -:  125:		vec<3, T, Q> const s(normalize(cross(up, f)));
        -:  126:		vec<3, T, Q> const u(cross(f, s));
        -:  127:
        -:  128:		mat<4, 4, T, Q> Result(1);
        -:  129:		Result[0][0] = s.x;
        -:  130:		Result[1][0] = s.y;
        -:  131:		Result[2][0] = s.z;
        -:  132:		Result[0][1] = u.x;
        -:  133:		Result[1][1] = u.y;
        -:  134:		Result[2][1] = u.z;
        -:  135:		Result[0][2] = f.x;
        -:  136:		Result[1][2] = f.y;
        -:  137:		Result[2][2] = f.z;
        -:  138:		Result[3][0] = -dot(s, eye);
        -:  139:		Result[3][1] = -dot(u, eye);
        -:  140:		Result[3][2] = -dot(f, eye);
        -:  141:		return Result;
        -:  142:	}
        -:  143:
        -:  144:	template<typename T, qualifier Q>
        -:  145:	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, vec<3, T, Q> const& up)
        -:  146:	{
        -:  147:#       if (GLM_CONFIG_CLIP_CONTROL & GLM_CLIP_CONTROL_LH_BIT)
        -:  148:            return lookAtLH(eye, center, up);
        -:  149:#       else
        -:  150:            return lookAtRH(eye, center, up);
        -:  151:#       endif
        -:  152:	}
        -:  153:}//namespace glm
