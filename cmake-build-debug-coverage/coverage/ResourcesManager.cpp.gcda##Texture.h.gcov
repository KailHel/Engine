        -:    0:Source:/home/kail/Рабочий стол/Engine/graphics/Texture.h
        -:    0:Graph:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/support/ResourcesManager.cpp.gcno
        -:    0:Data:/home/kail/Рабочий стол/Engine/cmake-build-debug-coverage/CMakeFiles/OpenGL.dir/support/ResourcesManager.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by kail on 27.12.2020.
        -:    3://
        -:    4:
        -:    5:#ifndef OPENGL_TEXTURE_H
        -:    6:#define OPENGL_TEXTURE_H
        -:    7:
        -:    8:#include "glad/glad.h"
        -:    9:#include "string"
        -:   10:#include "../external_libraries/stbi//stb_image.h"
        -:   11:
        -:   12:#include "../support//ResourcesManager.h"
        -:   13:namespace SK {
        -:   14:    namespace Render {
        -:   15:        class Texture {
        -:   16:        public:
        -:   17:            //################################################################################################################################
        1:   18:            Texture(const GLuint width, const GLuint height,
        -:   19:                    const unsigned char *data,
        -:   20:                    const unsigned int channel = 4,
        -:   21:                    const GLenum filter = GL_LINEAR,
        1:   22:                    const GLenum wrapMode = GL_CLAMP_TO_EDGE) : _width(width), _height(height) {
        1:   23:                GLenum mode = GL_RGB;
        1:   24:                switch (channel) {
        1:   24-block  0
        1:   25:                    case 4:
        1:   26:                        mode = GL_RGBA;
        1:   27:                        break;
        1:   27-block  0
    #####:   28:                    case 3:
    #####:   29:                        mode = GL_RGB;
    #####:   30:                        break;
    %%%%%:   30-block  0
    #####:   31:                    default:
    #####:   32:                        mode = GL_RGBA;
    #####:   33:                        break;
    %%%%%:   33-block  0
        -:   34:                }
        1:   35:                glGenTextures(1, &ID);
        1:   35-block  0
        1:   36:                glBindTexture(GL_TEXTURE_2D, ID);
        1:   37:                glTexImage2D(GL_TEXTURE_2D, 0, mode, width, height, 0, mode, GL_UNSIGNED_BYTE, data);
        -:   38:
        1:   39:                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrapMode);
        1:   40:                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrapMode);
        1:   41:                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filter);
        1:   42:                glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filter);
        -:   43:
        1:   44:                delete data;
        1:   44-block  0
        1:   45:            }
        -:   46:
        -:   47:            Texture() = delete;
        -:   48:
    #####:   49:            ~Texture() {
    #####:   50:                glDeleteTextures(1, &ID);
    %%%%%:   50-block  0
    #####:   51:            }
        -:   52:            //################################################################################################################################
        -:   53:            void bind() const {
        -:   54:                glBindTexture(GL_TEXTURE_2D, ID);
        -:   55:            }
        -:   56:
        -:   57:        private:
        -:   58:            GLuint ID;
        -:   59:            unsigned int _width = 0;
        -:   60:            unsigned int _height = 0;
        -:   61:
        -:   62:        };
        -:   63:    }
        -:   64:}
        -:   65:#endif //OPENGL_TEXTURE_H
